data_C <- aggregate(admissions_C$NumberOfAdmissions, by=list(admissions_C$HospitalAdmitDate), sum)
# Cambiar nombre de columnas
names(data_C) <- c("Dates", "Admissions")
# Extraer las fechas
fechas_C <- as.Date(data_C$Dates, format="%Y-%m-%d")
class(fechas_C)
head(fechas_C)
# Combinando los datos a objeto zoo
admissions_C.z <- zoo(x=data_C$Admissions, order.by=fechas_C)
class(admissions_C.z)
str(admissions_C.z)
head(admissions_C.z)
# Extrayendo el indice de tiempo y los datos
index(admissions_C.z)
coredata(admissions_C.z)
# Fechas de Inicio y Final
start(admissions_C.z)
end(admissions_C.z)
# Extraer subconjunto indexando con un vector de fechas
admissions_C.z[as.Date(c("2020/4/6", "2020/5/19", "2020/9/19"))]
# Otra opcion: usar window() para extraer valores entre 2 fechas
window(admissions_C.z, start=as.Date("2020/4/6"), end=as.Date("2020/5/19"))
# Graficar los datos
plot(admissions_C.z, col="blue", lty=1, lwd=2, ylim=c(0,50), main="Daily Hospital Admissions COVID19",
ylab="Number of Admissions")
# Liberia dygraphs para graficos más avanzados e interactivos
#install.packages("dygraphs")
library(dygraphs)
dygraph(admissions_C.z, "Daily Hospital Admissions COVID19")
# Guardamos los datos de otro hospital ---> Extraer solo los datos del Hospital==E
admissions_E <- admissions[admissions$HospitalID=="E",]
# Fechas repetidas
data_E <- aggregate(admissions_E$NumberOfAdmissions, by=list(admissions_E$HospitalAdmitDate), sum)
names(data_E) = c("Dates", "Admissions")
# Extraer fechas
fechas_E <- as.Date(data_E$Dates, format="%Y-%m-%d")
# Combinando los datos a objeto zoo
admissions_E.z <- zoo(x=data_E$Admissions, order.by=fechas_E)
# Grafico solo para el Hospital E
dygraph(admissions_E.z, "Daily Hospital Admissions COVID19")
# Grafico para los dos hospitales (notar el problema de datos faltantes por fechas distintas)
dygraph(cbind(admissions_C.z,admissions_E.z), "Daily Hospital Admissions COVID19")
######### Ejercicio 9: Características de la serie de COVID: componente estacional, estacionaria o no, etc.
# Tomemos la serie admissions_C
head(data_C)
# Vamos a convertirla a objeto "ts" o mas bien "xts"
library(xts)
# Si vemos que "Dates" es de clase caracter la transformamos para tenga formato fecha
class(data_C$Dates)
data_C$Dates=as.Date(data_C$Dates)
class(data_C$Dates)
# Creamos el objeto xts (fecha en el indice)
df.ts <- xts(data_C[, -1], order.by=data_C$Dates)
# Cambiar nombre de la columna V1
names(df.ts) <- c("Admissions")
# Autoplot
library(forecast)
autoplot(df.ts)
# Dickey Fuller Test (Estacionariedad)
adf.test(data_C$Admissions)
######### Ejercicio 10: Modelos Autoarima y NN para predecir la serie de COVID
auto.arima(df.ts)
# Order (AR + I + MA) # version basica (deberia dar que hay que diferenciar / integrar)
help(auto.arima)
# Mejor modelo (modificando los parámetros por defecto)
myarima <- auto.arima(df.ts, trace = T,
stepwise = F,
approximation = F, max.p = 10, max.q = 10, max.order = 20, max.d = 5)
# Modelo
myarima
# Forecast de 30 periodos (dias)
arimafore <- forecast(myarima, h = 30)
autoplot(arimafore)
#### Redes Neuronales
fit = nnetar(df.ts)
# Predicciones
nnetforecast <- forecast(fit, h = 30, PI = F)
autoplot(nnetforecast)
# Para el historial real, ¿como se comparan los datos reales vs los estimados?
# Autoarima
dygraph(cbind(arimafore$x,fitted(arimafore)), "Real vs Estimated Admissions")
# NN
dygraph(cbind(nnetforecast$x,fitted(nnetforecast)), "Real vs Estimated Admissions")
# Ver las predicciones  con dygraph (se puede hacer zoom seleccionando en el grafico)
# Autoarima
dygraph(cbind(arimafore$x,arimafore$mean), "Real vs Future Estimated")
# NN
dygraph(cbind(nnetforecast$x,nnetforecast$mean), "Real vs Future Estimated")
# Ver solo lo estimado
# Autoarima
dygraph(cbind(fitted(arimafore),arimafore$mean), "Historical Estimated vs Future Estimated")
# NN
dygraph(cbind(fitted(nnetforecast),nnetforecast$mean), "Historical Estimated vs Future Estimated")
# Comparar lo real + las dos predicciones Autoarima vs NN
dygraph(cbind(arimafore$x,arimafore$mean,nnetforecast$mean), "Historical Estimated vs Future Estimated")
library(prophet)
# Crear dataframe con formato para Prophet (ds,y)
Chile_df=data.frame(ds=as.Date(1990:2019), y=dsubset$Chile)
df.ts
View(df.ts)
View(data_C)
names(data_C)
names(data_C)=c("ds","y")
View(data_C)
# Modelo
pm_data_C <- prophet(data_C)
# Predicciones
future_data_C <- make_future_dataframe(pm_data_C, periods = 6)
forecast_data_C <- predict(pm_data_C, future_data_C)
# Plot
plot(pm_data_C, forecast_data_C)
# Plot
plot(pm_Chile, forecast_Chile)
plot(pm_Bulgaria, forecast_Bulgaria)
# Datos
df <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')
# Datos
df <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')
m <- prophet(df)
# Modelo
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m, future)
# Plot
plot(m, forecast)
# Modelo
m <- prophet(df,daily.seasonality=TRUE)
# Predicciones
future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
# Plot
plot(m, forecast)
library(lubridate)
library(tseries)
library(forecast)
library(ggplot2)
library(zoo)
ymd(19931123) # Year / Month / Day
dmy(23111993) # Day / Month / Year
mdy(11231993) # Month / Day / Year
# Vamos a usar fechas y tiempo a la vez
ymd_hm(199311231224) # Year / Month / Day / Hour / Minutes
mytimepoint <- ymd_hm("1993-11-23 12:24", tz = "Europe/Madrid") #tz: time zone parameter
# Extrayendo los componentes
minute(mytimepoint)
day(mytimepoint)
hour(mytimepoint)
year(mytimepoint)
month(mytimepoint)
# Podemos modificar el valor de solo un componente (de 11 a 14)
hour(mytimepoint)
hour(mytimepoint) <- 14
mytimepoint
# Tambien se puede calcular el dia de la semana que corresponde a nuestra fecha
?wday
wday(mytimepoint) # Empieza en Domingo por defecto
wday(mytimepoint, label=TRUE)
wday(mytimepoint, label=TRUE, abbr=FALSE) # los niveles que considera sin abreviarlos
# Podemos ver en otra zona a qué fecha y hora corresponde
with_tz(mytimepoint, tz = "Europe/London") # una hora menos en Londres
mytimepoint
# Calculando el intervalo entre dos fechas
time1 <- ymd_hm("1993-11-23 11:23", tz = "Europe/Madrid")
time2 <- ymd_hm("1995-11-02 10:23", tz = "Europe/Madrid")
myinterval <- interval(time1, time2); myinterval
# Otra forma de convertir a formato fecha
c <- as.Date("2019-12-25") # Y M D
c
class(c)
# Creamos un vector de fechas con diferentes formatos
a <- c("1998,11,11", "1983/01/23", "1982:09:04", "1945-05-09", 19821224, "1974.12.03", 19871210)
a
a <- ymd(a, tz = "CET") # Lo convertimos usando la función ymd
a
# Creamos un vector de tiempos con diferentes formatos
b <- c("22 4 5", "04;09;45", "11:9:56", "23,15,12", "14 16 34", "8 8 23", "21 16 14")
b <- hms(b) # Lo convertimos usando la función ymd
b
# Creamos un vector de fechas con diferentes formatos
c <- c("1998,11,11", "1983/01/23", "1982:09:04", "1945-05-09", 19821224, "1974.12.03", 19871210)
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
c
# Creamos un vector de fechas con diferentes formatos
c <- c("1998,11,11", "1983/01/23", "1982:09:04", "1945-05-09")
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
# Creamos un vector de fechas con diferentes formatos
c <- c("1998,11,11", "1983/01/23", "1945-05-09")
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
# Creamos un vector de fechas con diferentes formatos
c <- c("1998,11,11")
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
# Creamos un vector de fechas con diferentes formatos
c <- c("1945-05-09")
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
# Creamos un vector de fechas con diferentes formatos
c <- c( "1983/01/23")
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
# Creamos un vector de fechas con diferentes formatos
c <- c("1983/01/23", "1982:09:04", "1945-05-09", 19821224, "1974.12.03", 19871210)
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
View(c)
c
# Creamos un vector de fechas con diferentes formatos
c <- "1983/01/23"
c
c <- as.Date(c) # Lo convertimos usando la función as.Date
c
class(c)
c <- "1983-01-23"
c <- as.Date(c)
# Otra función
c <- "1983/01/23"
c <- as.Date(c)
c <- "1983-01-23"
c <- as.Date(c)
c <- "1982:09:04"
c <- as.Date(c)
c <- "1983 01 23"
c <- as.Date(c)
# Otra función
c <- "1983/01/23"
c <- as.Date(c)
c <- "1983-01-23"
c <- as.Date(c)
# Creamos un vector de medidas o valores numéricos
f <- rnorm(7,10)
f <- round(f, digits = 2)
f
# Creando el dataframe
date_time_measurement1 <- cbind.data.frame(date = a, time = b, measurement = f)
date_time_measurement1
#Solución
#1
x <- ymd_hm("2014-04-12 23:12", tz = "CET")
#2
minute(x)
minute(x) <- 7
x
#3
with_tz(x, tz="Europe/London")
#4
y <- ymd_hm(tz = "CET", "2015-12-12 09:45")
y-x
# Creamos unos datos (50 valores aleatorios entre 10-45)
mydata <- runif(n = 50, min = 10, max = 45)
# ts es la clase "time series"
# Vamos a poner que empieza en el año 1956
# con una freq de 4 obs por año (cuatrimestres)
mytimeseries <- ts(data = mydata,
start = 1956, frequency = 4)
# Creamos unos datos (50 valores aleatorios entre 10-45)
mydata <- runif(n = 50, min = 10, max = 45)
# ts es la clase "time series"
# Vamos a poner que empieza en el año 1956
# con una freq de 4 obs por año (cuatrimestres)
mytimeseries <- ts(data = mydata,
start = 1956, frequency = 4)
class(mytimeseries)
# Veamos el grafico de la serie
plot(mytimeseries)
# Tiempos
time(mytimeseries)
# Redefiniendo el inicio "start" en el cuatrimestre 3
mytimeseries <- ts(data = mydata,
start = c(1956,3), frequency = 4)
time(mytimeseries)
plot(mytimeseries)
# Usaremos el dataset "Nottem"
help(nottem) # Serie de tiempo que contiene el promedio de temperaturas
# Plot
plot(nottem)
# Plot con función "autoplot" que usa ggplot2
autoplot((nottem))
# Le podemos agregar capas al autoplot
autoplot(nottem) + ggtitle("Autoplot of Nottingham temperature data")
# Gráfico de descomposición en efecto de tendencia, estacional y residual.
plot(decompose(nottem))
# Otra forma de hacer la descomposición
autoplot(decompose(nottem))
# Otra aleternativa Seasonal Decomposition of Time Series by Loess
plot(stl(nottem, s.window="periodic")) #s.window: seasonal window
# Extraer los componentes de una serie temporal (guardar el decompose)
mynottem <- decompose(nottem)
nottem
# Extraer y dibujar solo el componente de tendencia
autoplot(mynottem$trend)
# Extraer y dibujar solo el componente estacional
autoplot(mynottem$seasonal)
# Dickey Fuller Test (Estacionariedad)
adf.test(nottem)
######### Ejercicio 6: Datos Faltantes y Outliers
## Importar los datos
mydata <- read.csv("Rmissing.csv")
# Convertir la segunda columna en una serie de tiempo sin especificar frecuencia
myts <- ts(mydata$mydata)
myts
# Comprobar si hay NAs y outliers
summary(myts)
sum(is.na(myts)) #numero de missing obs
plot(myts)
# Opción 1 na.locf: LOCF: last observation carried forward (copia la última observación antes del NA)
myts.NAlocf <- na.locf(myts)
summary(myts.NAlocf)
# Opción 2 na.fill: rellena con el valor que le pongamos
myts.NAfill <- na.fill(myts, 33)
summary(myts.NAfill)
#  Opción 3: con el paquete forecast
myts.NAinterp <- na.interp(myts) #rellena NA con interpolacion
summary(myts.NAinterp)
sum(is.na(myts.NAlocf)) #missing obs
sum(is.na(myts.NAfill)) #missing obs
sum(is.na(myts.NAinterp)) #missing obs
# Detección automática de outliers con la librería forecast, función tsoutliers (me dice cuáles):
myts1 <- tsoutliers(myts)
myts1
plot(myts) # para ver los picos
# Para limpiar los NAs y outliers usaremos tsclean del paquete forecast
mytsclean <- tsclean(myts)
plot(mytsclean) # datos limpios sin picos ni valores faltantes
summary(mytsclean)
# Adicional: ¿Esta serie será estacionaria?
# Dickey Fuller Test (Estacionariedad)
adf.test(mytsclean)
# Importar la librería zoo
#install.packages("zoo")
library(zoo)
# Importar los datos
library(readr)
admissions <- read.csv("admissions.csv")
View(admissions)
# Hay varios hospitales ---> Extraer solo los datos del Hospital==C
admissions_C <- admissions[admissions$HospitalID=="C",]
# Hay fechas que se repiten, vamos a agruparlas for fecha para que sean únicas
data_C <- aggregate(admissions_C$NumberOfAdmissions, by=list(admissions_C$HospitalAdmitDate), sum)
# Cambiar nombre de columnas
names(data_C) <- c("Dates", "Admissions")
# Extraer las fechas
fechas_C <- as.Date(data_C$Dates, format="%Y-%m-%d")
class(fechas_C)
head(fechas_C)
# Combinando los datos a objeto zoo
admissions_C.z <- zoo(x=data_C$Admissions, order.by=fechas_C)
class(admissions_C.z)
str(admissions_C.z)
head(admissions_C.z)
# Extrayendo el indice de tiempo y los datos
index(admissions_C.z)
coredata(admissions_C.z)
# Fechas de Inicio y Final
start(admissions_C.z)
end(admissions_C.z)
# Extraer subconjunto indexando con un vector de fechas
admissions_C.z[as.Date(c("2020/4/6", "2020/5/19", "2020/9/19"))]
# Otra opcion: usar window() para extraer valores entre 2 fechas
window(admissions_C.z, start=as.Date("2020/4/6"), end=as.Date("2020/5/19"))
# Graficar los datos
plot(admissions_C.z, col="blue", lty=1, lwd=2, ylim=c(0,50), main="Daily Hospital Admissions COVID19",
ylab="Number of Admissions")
# Liberia dygraphs para graficos más avanzados e interactivos
#install.packages("dygraphs")
library(dygraphs)
dygraph(admissions_C.z, "Daily Hospital Admissions COVID19")
# Guardamos los datos de otro hospital ---> Extraer solo los datos del Hospital==E
admissions_E <- admissions[admissions$HospitalID=="E",]
View(admissions_E)
# Fechas repetidas
data_E <- aggregate(admissions_E$NumberOfAdmissions, by=list(admissions_E$HospitalAdmitDate), sum)
names(data_E) = c("Dates", "Admissions")
# Extraer fechas
fechas_E <- as.Date(data_E$Dates, format="%Y-%m-%d")
# Combinando los datos a objeto zoo
admissions_E.z <- zoo(x=data_E$Admissions, order.by=fechas_E)
# Grafico solo para el Hospital E
dygraph(admissions_E.z, "Daily Hospital Admissions COVID19")
# Grafico para los dos hospitales (notar el problema de datos faltantes por fechas distintas)
dygraph(cbind(admissions_C.z,admissions_E.z), "Daily Hospital Admissions COVID19")
######### Ejercicio 9: Características de la serie de COVID: componente estacional, estacionaria o no, etc.
# Tomemos la serie admissions_C
head(data_C)
# Vamos a convertirla a objeto "ts" o mas bien "xts"
library(xts)
# Si vemos que "Dates" es de clase caracter la transformamos para tenga formato fecha
class(data_C$Dates)
data_C$Dates=as.Date(data_C$Dates)
class(data_C$Dates)
# Creamos el objeto xts (fecha en el indice)
df.ts <- xts(data_C[, -1], order.by=data_C$Dates)
View(df.ts)
# Cambiar nombre de la columna V1
names(df.ts) <- c("Admissions")
# Autoplot
library(forecast)
autoplot(df.ts)
# Dickey Fuller Test (Estacionariedad)
adf.test(data_C$Admissions)
######### Ejercicio 10: Modelos Autoarima y NN para predecir la serie de COVID
auto.arima(df.ts)
# Order (AR + I + MA) # version basica (deberia dar que hay que diferenciar / integrar)
help(auto.arima)
# Mejor modelo (modificando los parámetros por defecto)
myarima <- auto.arima(df.ts, trace = T,
stepwise = F,
approximation = F, max.p = 10, max.q = 10, max.order = 20, max.d = 5)
# Modelo
myarima
# Forecast de 30 periodos (dias)
arimafore <- forecast(myarima, h = 30)
autoplot(arimafore)
#### Redes Neuronales
fit = nnetar(df.ts)
# Predicciones
nnetforecast <- forecast(fit, h = 30, PI = F)
autoplot(nnetforecast)
# Para el historial real, ¿como se comparan los datos reales vs los estimados?
# Autoarima
dygraph(cbind(arimafore$x,fitted(arimafore)), "Real vs Estimated Admissions")
# NN
dygraph(cbind(nnetforecast$x,fitted(nnetforecast)), "Real vs Estimated Admissions")
# Ver las predicciones  con dygraph (se puede hacer zoom seleccionando en el grafico)
# Autoarima
dygraph(cbind(arimafore$x,arimafore$mean), "Real vs Future Estimated")
# NN
dygraph(cbind(nnetforecast$x,nnetforecast$mean), "Real vs Future Estimated")
# Ver solo lo estimado
# Autoarima
dygraph(cbind(fitted(arimafore),arimafore$mean), "Historical Estimated vs Future Estimated")
# NN
dygraph(cbind(fitted(nnetforecast),nnetforecast$mean), "Historical Estimated vs Future Estimated")
# Comparar lo real + las dos predicciones Autoarima vs NN
dygraph(cbind(arimafore$x,arimafore$mean,nnetforecast$mean), "Historical Estimated vs Future Estimated")
# Vamos a ver otro conjunto de datos, en este caso los valores son:
# Número de muertes de mujeres por cáncer de mama (por año y por país)
library(readr)
df <- read_csv("breast_cancer_number_of_female_deaths.csv")
View(df)
# Primero vamos a invertir el conjunto de datos para tener en el indice de filas
# las fechas y en las columnas a los paises
names <- df$country # guardamos la lista de los países que serán luego las columnas
df <- data.frame(t(df[-1])) # transponemos el dataframe
colnames(df) <- names # modificamos los nombres de las columnas
# Vamos a seleccionar algunos países
dsubset <- df[,c("Chile","Bulgaria")]
summary(dsubset) # vemos que las vbles son de clase chr
dsubset$Chile <- as.numeric(dsubset$Chile)
dsubset$Bulgaria <- as.numeric(dsubset$Bulgaria)
summary(dsubset) # ahora si vemos más detalles
# Estacionariedad
adf.test(dsubset$Chile)
adf.test(dsubset$Bulgaria)
# Objeto serie temporal
mytimeseries <- ts(data = dsubset)
library(dygraphs)
dygraph(mytimeseries)
# Series univariantes
Chile_timeseries <- ts(data = dsubset$Chile)
Bulgaria_timeseries <- ts(data = dsubset$Bulgaria)
# Modelos
myarima_Chile <- auto.arima(Chile_timeseries, max.p = 10, max.q = 10, max.order = 20, max.d = 5)
myarima_Bulgaria <- auto.arima(Bulgaria_timeseries, max.p = 10, max.q = 10, max.order = 20, max.d = 5)
# Predicciones
arimafore_Chile <- forecast(myarima_Chile, h = 6)
autoplot(arimafore_Chile)
arimafore_Bulgaria <- forecast(myarima_Bulgaria, h = 6)
autoplot(arimafore_Bulgaria)
library(prophet)
# Datos
df <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')
# Modelo
m <- prophet(df)
# Predicciones
future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
# Plot
plot(m, forecast)
View(dsubset)
index(dsubset)
View(dsubset)
rownames(dsubset)
### Prophet del otro ejemplo
# Crear dataframe con formato para Prophet (ds,y)
Chile_df=data.frame(ds=as.Date(rownames(dsubset)), y=dsubset$Chile)
### Prophet del otro ejemplo
# Crear dataframe con formato para Prophet (ds,y)
Chile_df=data.frame(ds=as.Date(1990:2019), y=dsubset$Chile)
### Prophet del otro ejemplo
# Crear dataframe con formato para Prophet (ds,y)
Chile_df=data.frame(ds=1990:2019, y=dsubset$Chile)
Bulgaria_df=data.frame(ds=1990:2019, y=dsubset$Bulgaria)
# Modelo
pm_Chile <- prophet(Chile_df)
### Prophet del otro ejemplo
# Crear dataframe con formato para Prophet (ds,y)
Chile_df=data.frame(ds=as.Date(1990:2019), y=dsubset$Chile)
Bulgaria_df=data.frame(ds=as.Date(1990:2019), y=dsubset$Bulgaria)
# Modelo
pm_Chile <- prophet(Chile_df)
pm_Bulgaria <- prophet(Bulgaria_df)
# Predicciones
future_Chile <- make_future_dataframe(pm_Chile, periods = 6)
forecast_Chile <- predict(pm_Chile, future_Chile)
future_Bulgaria <- make_future_dataframe(pm_Bulgaria, periods = 6)
forecast_Bulgaria <- predict(pm_Bulgaria, future_Bulgaria)
# Plot
plot(pm_Chile, forecast_Chile)
plot(pm_Bulgaria, forecast_Bulgaria)
